const { db } = require('../utils/firebase');

// Defini√ß√£o dos tipos de treino e seus grupos musculares relacionados
const TIPOS_TREINO = {
  'superiores': ['Peito', 'Costas', 'Ombros', 'B√≠ceps', 'Tr√≠ceps'],  // M√∫sculos membros superiores
  'inferiores': ['Pernas', 'Gl√∫teos', 'Panturrilha'],               // M√∫sculos membros inferiores
  'core': ['Abd√¥men', 'Lombar'],                                   // Core (abd√¥men, lombar)
  'cardio': ['Cardio', 'HIIT', 'Circuito'],                        // Exerc√≠cios cardiovasculares
  'funcional': ['Funcional', 'Calistenia', 'Cross Training']       // Treinos funcionais
};

let exerciciosCache = null; // Cache para armazenar exerc√≠cios e evitar v√°rias consultas

// Fun√ß√£o para carregar exerc√≠cios do Firestore (Firebase)
async function carregarExercicios() {
  if (exerciciosCache) return exerciciosCache; // Se j√° estiver no cache, retorna imediatamente

  try {
    const snapshot = await db.collection('exercicios').get(); // Busca todos os exerc√≠cios da cole√ß√£o
    exerciciosCache = [];

    // Percorre cada documento retornado e adiciona no cache
    snapshot.forEach(doc => {
      exerciciosCache.push({
        id: doc.id,       // ID do documento
        ...doc.data()     // Dados do exerc√≠cio (nome, tipo, descri√ß√£o, etc)
      });
    });

    return exerciciosCache; // Retorna o array com os exerc√≠cios carregados
  } catch (error) {
    console.error('Erro ao carregar exerc√≠cios:', error);
    throw error; // Repasse o erro para tratamento externo
  }
}

// Fun√ß√£o que filtra exerc√≠cios pelo tipo de treino (superiores, inferiores, etc)
function filtrarExerciciosPorTipo(exercicios, tipo) {
  // Pega os grupos musculares relacionados ao tipo informado, ou vazio se n√£o existir
  const gruposMusculares = TIPOS_TREINO[tipo] || [];

  // Filtra s√≥ os exerc√≠cios cujo campo 'tipo_exercicio' contenha algum grupo muscular do tipo
  return exercicios.filter(ex =>
    gruposMusculares.some(grupo => ex.tipo_exercicio.includes(grupo))
  );
}

// Inicializa o sistema, carregando exerc√≠cios e exibindo logs
async function initialize() {
  try {
    console.log('üîÑ Carregando exerc√≠cios...');
    await carregarExercicios(); // Carrega e cacheia exerc√≠cios
    console.log('‚úÖ Sistema inicializado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Falha na inicializa√ß√£o:', error);
    return false;
  }
}

// Gera uma recomenda√ß√£o de treino simples para o aluno, com base no tipo de treino
async function recommend(aluno) {
  try {
    if (!aluno.tipo) throw new Error('Tipo de treino n√£o especificado'); // Valida√ß√£o simples

    // Busca todos os exerc√≠cios (usando cache se poss√≠vel)
    const todosExercicios = await carregarExercicios();

    // Filtra os exerc√≠cios conforme o tipo do aluno
    let exerciciosFiltrados = filtrarExerciciosPorTipo(todosExercicios, aluno.tipo);

    // Caso n√£o encontre exerc√≠cios espec√≠ficos para o tipo, usa todos os exerc√≠cios como fallback
    if (exerciciosFiltrados.length === 0) {
      exerciciosFiltrados = todosExercicios;
    }

    // Seleciona aleatoriamente 9 exerc√≠cios da lista filtrada
    const exerciciosSelecionados = [...exerciciosFiltrados]
      .sort(() => 0.9 - Math.random()) // Embaralha
      .slice(0, 9);                    // Pega os primeiros 9

    // Monta e retorna o objeto de recomenda√ß√£o
    return {
      tipo: aluno.tipo,
      exercicios: exerciciosSelecionados.map(ex => ({
        id: ex.id,
        nome: ex.nm_exercicio,
        tipo: ex.tipo_exercicio,
        descricao: ex.ds_exercicio || 'Sem descri√ß√£o' // Coloca descri√ß√£o padr√£o se n√£o tiver
      })),
      observacoes: [
        aluno.nm_aluno ? `Recomenda√ß√£o para ${aluno.nm_aluno}` : 'Recomenda√ß√£o gen√©rica'
      ]
    };
  } catch (error) {
    console.error('Erro ao gerar recomenda√ß√£o:', error);
    return {
      tipo: aluno.tipo || 'erro',
      exercicios: [],
      observacoes: ['Erro: ' + error.message]
    };
  }
}

module.exports = {
  initialize,
  recommend,
  carregarExercicios
};
